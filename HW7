#include<iostream>
#include<ctime>
#include<vector>

using namespace std;

class Organism {
    protected:
        int location;
        vector<int> moves;
    
    public:
        Organism(const int& loc) : location(loc) {
            vector<int> v;
            moves = v;
            LocVec();
        }
        virtual void move() = 0;
        virtual char value() const = 0;
        int getLocation() const {return location;}
        void setLocation(const int& loc);
        int getVal(const int& i) const{return moves[i];}

        vector<int> LocVec();
};

void Organism::setLocation(const int& loc){
    location = loc;
    LocVec();
}

vector<int> Organism::LocVec() {
    vector<int> move;
    if ( ( (location) % 20 ) == 0) move.push_back(-1);
    else move.push_back(location - 1);
    
    if ( ( (location+1) % 20 ) == 0) move.push_back(-1);
    else move.push_back(location + 1);

    if (location <= 19) move.push_back(-1);
    else move.push_back(location - 20);

    if (location >= 380) move.push_back(-1);
    else move.push_back(location + 20);
    move.push_back(location);
    moves = move;
    return moves;
}

class Ant : public Organism {
    private:
        int i;
    
    public:
        Ant(const int& loc) : Organism(loc), i(0) {}
        void move();
        char value() const {return 'o';}
        int getIter() const {return i;}
        friend ostream& operator<<(ostream& outs, const Ant& ant);
};

ostream& operator<<(ostream& outs, const Ant& ant){
    outs << "o";
    return outs;
}

void Ant::move(){
    if (i == 3){
        i = 0;
    }
    i++;
}

class Board {
    private:
        char ** score;
        vector<Ant> ants;
    
    public:
        Board() : score(new char * [20]){
            vector<Ant> a;
            ants = a;
            for (size_t i = 0; i < 20; ++i){
                score[i] = new char[20];
            }
        }
    
        int randomize() const;
        bool occupied(const int& elem) const;
        void place(const int& location, const char& org);
        void place_org(Ant& org);
        void passTime();
        void move(Ant& org);
        
        bool getUp(const int& elem) const;
        bool getDown(const int& elem) const;
        bool getLeft(const int& elem) const;
        bool getRight(const int& elem) const;
        vector<char> nextToMe(const Organism& org);

        

        virtual ~Board();
        void loadBoard();
        void printBoard() const;
};

bool Board::occupied(const int& elem) const{
    if (score[elem%20][elem/20] == '-' ) return false;
    return true;
}

void Board::place_org(Ant& org){
    score[org.getLocation()%20][org.getLocation()/20] = org.value();
    ants.push_back(org);
}

void Board::passTime(){
    cout << "organisms size: " << ants.size() << endl;
   for(size_t i = 0; i < ants.size(); i++){
        cout << i << endl;
        move(ants[i]);
    }
}


vector<char> Board::nextToMe(const Organism& org){
    vector<int> locvec;
 
    for (size_t i = 0; i < 5; i++){
        locvec.push_back(org.getVal(i));
    }
    int location = locvec[4];

    vector<char> aroundMe;
    for (size_t i = 0; i < locvec.size()-1; i++ ){
        if (locvec[i] == -1) aroundMe.push_back('b'); // if it is a border element
        aroundMe.push_back(score[locvec[i]%20][locvec[i]/20]); // push back this element's value
    }
    return aroundMe;
}
void Board::move(Ant& org){
    //int count = 0;
    vector<int> moveVec;
    srand(time(NULL));
    
    for (size_t i = 0; i < 5; i++){
        moveVec.push_back(org.getVal(i));
    }
    vector<char> ntm;
    ntm = nextToMe(org);
    for (int i: moveVec)
        cout << i << " ";
    cout << endl;
    vector<int> chooserand; // choose a random place for it to go
    
    if (org.value() == 'o'){ // if it's an ant
        for (size_t i = 0; i < ntm.size(); i++){
            //location vector has form
            // <[68,70,49,89],69>
            // <left,right,up,down, current location>
            if (ntm[i] != 'b' || ntm[i] != 'o' || ntm[i] != 'X'){
                chooserand.push_back(moveVec[i]);
            }
            // chooserand <24,67,8>
        }
        int num = rand() % (chooserand.size()-1) + 0;
        cout << "size: " << chooserand.size() << "randnum: " << num << endl;
        if(chooserand.size() != 0){
            org.setLocation(num); //set the location of the organism
            place_org(org); //place the organism on the board
            place(moveVec[4],'r'); // put a dash in the previous location
            for (int i = 0;i < chooserand.size(); i++)
                cout << chooserand[i] << " ";
            cout << endl;
            printBoard();
        }
    }
}


bool Board::getLeft(const int& elem) const{
    if ( ( (elem) % 20 ) == 0) return true; // if it is a border element
    if (occupied(elem-1))return true;
    return false;
}

bool Board::getRight(const int& elem) const {
    if ( ( (elem+1) % 20 ) == 0) return true; // if it is a border element
    if (occupied(elem+1)) return true;
    return false;
}

bool Board::getUp(const int& elem) const{
    if ( elem <= 19) return true; // if it is a border element
    if (occupied(elem-20))return true;
    return false;
}

bool Board::getDown(const int& elem) const{
    if ( elem >= 380) return true; // if it is a border element
    if (occupied(elem+20))return true;
    return false;
}

int Board::randomize() const{
    srand(time(NULL));
    int location = rand() % 399 + 0; // random number between 399 and 0
    if (occupied(location)){
        // if the location is occupied
        while(occupied(location)){
            // find a location that is not occupied
            location = rand() % 399 + 0;
        }
    }
    return location;
    // score[location%20][location/20] = org;
}

void Board::place(const int& location , const char& val){ //assuming we will always get a valid place
    score[location%20][location/20] = val;
}
Board::~Board(){
    for(size_t i = 0; i < 20; ++i ){
        delete [] score[i];
    }
    delete [] score;
}

void Board::loadBoard() {
    for (size_t y = 0; y < 20; ++y){
        for (size_t x = 0; x < 20; ++x){
            score[y][x] = '-';
        }
    }
}

void Board::printBoard() const {
    cout <<"+-----------------------------------------+"<< endl;
    for (size_t y = 0; y < 20; ++y){
        cout << "| ";
        for (size_t x = 0; x < 20; ++x){
            cout << score[y][x] << " ";
        }
        cout << "|" << endl;
    }
    cout <<"+-----------------------------------------+"<< endl;
}
int main() {
    
}
