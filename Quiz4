#include <iostream>


using namespace std;

class Measurement {
    int feet; //numerator
    int inches; //denominator
    
    void reduce();
    int getTotalInches() const;

public:
    Measurement() {
        feet = 0;
        inches = 0;
        reduce();
    }
    
    Measurement(int inchs) {
        feet = 0;
        inches = inchs;
        reduce();
    }
    
    int getInches() const { return inches; }
    int getFeet() const { return feet; }
    
    bool operator==(const Measurement& rhs);
    bool operator!=(const Measurement& rhs);

    Measurement operator+(const Measurement& rhs) const;
    Measurement operator-(const Measurement& rhs) const;
    
    
    Measurement& operator++();
    Measurement operator++(int);
};


int Measurement::getTotalInches() const {
    return 12 * feet + inches;
}

void Measurement::reduce() {
    inches = getTotalInches();
    feet = 0;

    if(inches > 0) {
        while(inches >= 12) {
            feet++;
            inches = inches - 12;
        }
    } else {
        while(abs(inches) >= 12) {
            feet--;
            inches = inches + 12;
        }
    }
}

Measurement Measurement::operator+(const Measurement& rhs) const {
    Measurement temp;
    temp.inches = this->getTotalInches() + rhs.getTotalInches();
    temp.reduce();
    return temp;
}

Measurement Measurement::operator-(const Measurement& rhs) const {
    Measurement temp;
    temp.inches = this->getTotalInches() - rhs.getTotalInches();
    temp.reduce();
    return temp;
}

bool Measurement::operator==(const Measurement& rhs) {
    return (this->getTotalInches() == rhs.getTotalInches());
}

bool Measurement::operator!=(const Measurement& rhs) {
    return !(*this == rhs);
}


Measurement& Measurement::operator++() {
    inches += 1; //add one
    reduce();
    return *this;
}

Measurement Measurement::operator++(int) {
    Measurement temp = *this;
    inches += 1;
    reduce();
    return temp;
}

ostream& operator<<(ostream& outs, const Measurement& rhs) {
    outs << rhs.getFeet() << "'" << rhs.getInches() << "''" << endl;
    return outs;
}


int main(){
    Measurement m1;
    Measurement m2(24);
    Measurement m3(-12);
    
    cout << "m1: " << m1;
    cout << "m2: " << m2;
    cout << "m3: " << m3;
    
    cout << endl;
    
    cout << "m1++: " << m1++;
    cout << "m1: " << m1;
    cout << "++m1: " << ++m1;
    cout << "m1: " << m1;
    
    
    cout << endl;
    
    cout << "m1: " << m1;
    cout << "m2: " << m2;
    cout << "m3: " << m3;
    
    cout << endl;
    
    cout << "m1 + m2: " << (m1 + m2);
    cout << "m2 + m3: " << (m2 + m3);
    cout << "m2 - m1: " << (m2 - m1);
    cout << "m1 - m2: " << (m1 - m2);
    cout << "m1 - m3: " << (m1 - m3);
    
    cout << endl;
    
    cout << "m1 == m2: " << boolalpha << (m1 == m2) << endl;
    cout << "m1 != m2: " << boolalpha << (m1 != m2)<< endl;
    
    cout << endl;
    
    cout << "m2 == m2: " << boolalpha << (m2 == m2) << endl;
    cout << "m2 != m2: " << boolalpha << (m2 != m2) << endl;
}

