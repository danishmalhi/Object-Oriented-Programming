#include<iostream>
#include<string>
#include<vector>
#include<cstdlib>

using namespace std;

class StringSet{
private:
    int search(const string x); //if found, index is returned, else -1 is returned
    vector<string> v;
    
public:
    StringSet(); //Default Constructor
    StringSet(const string intStr[], int arrSize);
    
    bool add(const string x); //add a string to the set
    bool remove(const string x); //remove a string from set
    void clear(); //clear the entire set
    void output(); //output all strings in the text
    
    //Union of two StringSet objects
    friend StringSet operator +(const StringSet &s1, const StringSet &s2);
    
    //Intersection of two StringSet objects
    friend StringSet operator *(const StringSet &s1, const StringSet &s2);
};

int StringSet::search(const string x){
    int i;
    for (i=0; i < v.size(); i++){
        if (v[i] == x)
            return i;
    }
    return -1;
}

StringSet::StringSet() {}

StringSet::StringSet(const string intStr[], int arrSize){
    int i;
    for (i=0; i < arrSize; i++){
        v.push_back(intStr[i]);
    }
}

bool StringSet::add(const string x){
    int i;
    i = search(x);
    if (i >= 0){
        return false;
    }
    v.push_back(x);
    return true;
}

bool StringSet::remove(const string x){
    int i;
    i = search(x);
    if (i >= 0){
        vector<string> vec;
        for (int j = 0; j < v.size(); j++){
            if (v[j] != x){
                vec.push_back(v[j]);
            }
        }
        for (int j = 0; j < vec.size(); j++){
            v.push_back(vec[j]);
        }
        return true;
    }
    return false;
}

void StringSet::clear(){
    v.clear();
}

void StringSet::output(){
    int i;
    for (i=0; i < v.size(); i++){
        cout << v[i] << endl;
    }
}

StringSet operator +(const StringSet &s1, const StringSet &s2){
    StringSet str1;
    int i;
    
    for (i=0; i < s1.v.size(); i++) {
        str1.add(s1.v[i]);
    }
    for (i=0; i < s2.v.size(); i++) {
        str1.add(s2.v[i]);
    }
    return str1;
}

StringSet operator *(const StringSet &s1, const StringSet &s2){
    StringSet str2;
    int i;
    int j;
    
    for (i=0; i < s1.v.size(); i++){
        for (j=0; j < s1.v.size(); j++){
            if (s1.v[i] == s2.v[j]){
                str2.add(s1.v[i]);
            }
        }
    }
    return str2;
}

int main(){}
